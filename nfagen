#!/usr/bin/env python3

class Tree:
    def __init__(self, val):
        self.children = []
        self.parent = None
        self.value = val

    def add_child(self, child):
        self.children.append(child)
        child.parent = self

class NFA:
    def __init__(self, alphabet):
        self.alphabet = alphabet
        # states need to be hashed by key, not stored in list
        # start with two states, 0 and 1, 1 is accepting
        # 1 will be the only accepting state
        self.L = []
        self.T = []
        # initialize L
        for i in range(2):
            row = []
            for j in range(2):
                row.append(False)
            self.L.append(row)
        # initialize T
        for i in range(2):
            row = {}
            for c in self.alphabet:
                row[c] = "E"
            self.T.append(row)
        
    def add_state(self):
        for i in range(len(self.L)):
            self.L[i].append(False)
        self.L.append([False]*(len(self.L)+1))

        row = {}
        for c in self.alphabet:
            row[c] = "E"
        self.T.append(row)
        return len(self.L) - 1
    
    def add_lambda(self, src, dest):
        self.L[src][dest] = True

    def add_edge(self, src, dest, char):
        self.T[src][char] = dest

    def lambda_wrap(self, src, dest, child):
        before = self.add_state()
        after = self.add_state()
        self.add_lambda(src, before)
        self.add_lambda(after, dest)
        self.process_child(before, after, child)

    def process_child(self, src, dest, child):
        if child.value == "SEQ":
            self.node_seq(src, dest, child)
        elif child.value == "ALT":
            self.node_alt(src, dest, child)
        elif child.value == "range":
            self.node_range(src, dest, child)
        elif child.value == "kleene":
            self.node_kleene(src, dest, child)
        elif child.value == "lambda":
            self.leaf_lambda(src, dest, child)
        elif child.value == "dot":
            self.leaf_dot(src, dest, child)
        elif child.value in self.alphabet:
            self.leaf_char(src, dest, child)
    
    def leaf_char(self, src, dest, child):
        self.add_edge(src, dest, child.value)

            
    def __str__(self):
        print("todo")
    
# this function is temporary for this file, needs to be restructured when merging later
def alphabet_encode(c):
    # operates on a single character
    return str(hex(ord(c)))[1:]

def main():
    alphabet = ["a", "b", "c"]
    nfa = NFA(alphabet)
    print(nfa.T)
    print(nfa.L)
    tree = Tree("a")
    nfa.lambda_wrap(0, 1, tree)
    print(nfa.T)
    print(nfa.L)


if __name__ == "__main__":
    main()
